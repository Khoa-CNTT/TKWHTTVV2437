// services/embeddingService.js
const { HfInference } = require("@huggingface/inference");

const generateTextAuto = (item) => {
  return Object.entries(item)
    .filter(([_, value]) => value !== undefined && value !== null)
    .map(([key, value]) => {
      if (typeof value === "object") {
        return `${key}: ${JSON.stringify(value)}`;
      }
      return `${key}: ${value}`;
    })
    .join(", ");
};

async function queryEmbeddings(text) {
  const { fetchFullData } = require("./PropertyService");

  // B1: Ph√¢n lo·∫°i √Ω ƒë·ªãnh ng∆∞·ªùi d√πng ƒë·ªÉ l·ªçc
  //   const classificationPrompt = `
  // B·∫°n l√† h·ªá th·ªëng l·ªçc d·ªØ li·ªáu kh√°ch s·∫°n. H√£y x√°c ƒë·ªãnh ng∆∞·ªùi d√πng ƒëang quan t√¢m ƒë·∫øn nh·ªØng ti√™u ch√≠ n√†o d∆∞·ªõi ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ truy v·∫•n d·ªØ li·ªáu:

  // C√°c ti√™u ch√≠ c√≥ th·ªÉ:
  // - "name": ng∆∞·ªùi d√πng ƒë·ªÅ c·∫≠p ƒë·∫øn t√™n kh√°ch s·∫°n, resort...
  // - "address": ng∆∞·ªùi d√πng h·ªèi v·ªÅ v·ªã tr√≠, ƒë·ªãa ƒëi·ªÉm, khu v·ª±c...
  // - "price": ng∆∞·ªùi d√πng quan t√¢m ƒë·∫øn gi√° ph√≤ng
  // - "amenities": ng∆∞·ªùi d√πng h·ªèi v·ªÅ ti·ªán nghi nh∆∞ h·ªì b∆°i, wifi, ƒëi·ªÅu h√≤a...
  // - "services": ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c d·ªãch v·ª• nh∆∞ ƒÉn s√°ng, spa, ƒë∆∞a ƒë√≥n...
  // - "availability": ng∆∞·ªùi d√πng quan t√¢m ƒë·∫øn ph√≤ng c√≤n tr·ªëng
  // - "reviews": ng∆∞·ªùi d√πng h·ªèi v·ªÅ ƒë√°nh gi√°, nh·∫≠n x√©t

  // C√¢u h·ªèi: "${text}"

  // Tr·∫£ l·ªùi b·∫±ng JSON array, v√≠ d·ª•: ["name", "amenities", "price"]
  // `.trim();

  //   const classifyResponse = await fetch(
  //     "https://openrouter.ai/api/v1/chat/completions",
  //     {
  //       method: "POST",
  //       headers: {
  //         Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
  //         "HTTP-Referer": process.env.SITE_URL,
  //         "X-Title": process.env.SITE_NAME,
  //         "Content-Type": "application/json",
  //       },
  //       body: JSON.stringify({
  //         model: "deepseek/deepseek-chat-v3-0324:free",
  //         messages: [{ role: "user", content: classificationPrompt }],
  //       }),
  //     }
  //   );

  //   const classifyData = await classifyResponse.json();
  //   let detectedTypes = classifyData.choices?.[0]?.message?.content?.trim();

  //   if (detectedTypes.startsWith("```")) {
  //     detectedTypes = detectedTypes
  //       .split("\n")
  //       .filter((line) => !line.startsWith("```"))
  //       .join("\n")
  //       .trim();
  //   }

  //   try {
  //     detectedTypes = JSON.parse(detectedTypes);
  //   } catch (err) {
  //     throw new Error("Invalid detectedTypes format");
  //   }

  //   // B2: Chu·∫©n b·ªã ƒëi·ªÅu ki·ªán l·ªçc
  //   const filterOptions = {};
  //   if (detectedTypes.includes("name")) {
  //     filterOptions.name = { $like: `%${text}%` };
  //   }
  //   if (detectedTypes.includes("address")) {
  //     filterOptions.address = { $like: `%${text}%` };
  //   }
  //   if (detectedTypes.includes("amenities")) {
  //     filterOptions.amenities = { some: { name: { $like: `%${text}%` } } };
  //   }
  // B·∫°n c√≥ th·ªÉ th√™m ƒëi·ªÅu ki·ªán kh√°c t∆∞∆°ng t·ª± nh∆∞ tr√™n.

  // B3: G·ªçi fetchFullData c√≥ ƒëi·ªÅu ki·ªán l·ªçc
  const fullData = await fetchFullData();

  // B4: Chuy·ªÉn sang text ƒë·ªÉ truy·ªÅn v√†o LLM
  const contextText = fullData.map(generateTextAuto).join("\n\n");

  console.log("üìÑ contextText:", contextText);
  const finalPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω ƒë·∫∑t ph√≤ng kh√°ch s·∫°n. D·ª±a tr√™n d·ªØ li·ªáu sau, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:

Th√¥ng tin kh√°ch s·∫°n:
${contextText}

C√¢u h·ªèi ng∆∞·ªùi d√πng:
"${text}"

Tr·∫£ l·ªùi:
`.trim();

  // B5: G·ª≠i l√™n LLM ƒë·ªÉ tr·∫£ l·ªùi
  const deepseekResponse = await fetch(
    "https://openrouter.ai/api/v1/chat/completions",
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "HTTP-Referer": process.env.SITE_URL,
        "X-Title": process.env.SITE_NAME,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-chat-v3-0324:free",
        messages: [{ role: "user", content: finalPrompt }],
      }),
    }
  );

  const deepseekData = await deepseekResponse.json();

  return {
    response: deepseekData.choices[0].message.content,
  };
}

module.exports = {
  queryEmbeddings,
};
